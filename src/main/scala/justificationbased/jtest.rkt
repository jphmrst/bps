#lang racket

(require "utils.rkt")
(require "jtms.rkt")
(require "jtre.rkt")

(define (shakedown-jtre)
  (in-jtre (create-jtre "Test One" #:debugging #t))
  (rule ((:intern (foo ?x) :var ?f :test (number? ?x))
	 (:intern (bar ?y) :var ?g :test (number? ?y)))
	(rassert! (mumble ?x ?y) (Test-intern ?f ?g)))
  (printf "\n :intern rule defined okay.")
  (rule ((:in (foo ?x) :var ?f
	      :test (not (number? ?x)))
	 (:in (bar ?y) :var ?g
	      :test (not (number? ?y))))
	(rassert! (grumble ?x ?y)
		  (:test-in ?f ?g)))
  (printf "\n :in rule defined okay.")
  (referent '(foo 1) #t)
  (cond ((not (null? (fetch '(foo 1))))
	 (printf "\n Referent worked okay."))
	(else (error "Referent failed.")))
  (referent '(bar 1) #t)
  (run-rules)
  (printf "\n No errors during attempted rule execution.")
  (cond ((not (null? (fetch '(mumble 1 1))))
	 (printf "\n:intern rule fired okay."))
	(else (printf "\n :intern rule failed to fire.")))
  (referent '(foo a) #t)
  (referent '(bar a) #t)
  (run-rules)
  (when (ormap (lambda (fact) (in? fact))
	       (fetch '(grumble ?p ?q)))
    (printf "\n%Premature triggering of :in rule."))
  (uassume! '(foo a) ':user)
  (uassume! '(bar a) ':user)
  (cond ((in? '(grumble a a))
	 (printf "\n :in rule worked okay."))
	(else (printf "\n:in rule failed to fire.")))
  (uassume! '(foo 1) ':user)
  (uassume! '(bar 1) ':user)
  (unless (in? '(mumble 1 1))
    (printf "\n Reference or JMS failure."))
  ':okay)

(shakedown-jtre)
